// Define the User model
model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  passwordHash String    // Store the hashed password
  userType    UserType  // Enum: Company or Influencer
  // Add other user-related fields here (e.g., profile picture, bio)

  // Define relationships
  Company     Company?  @relation(fields: [companyId], references: [id])
  Influencer  Influencer? @relation(fields: [influencerId], references: [id])
}

// Define the UserType enum
enum UserType {
  Company
  Influencer
}

// Define the Company model
model Company {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  companyName String
  industry    String
  contactInfo String
  // Add other company-related fields here (e.g., campaign history)

  // Define relationships
  User User @relation(fields: [userId], references: [id])
  campaigns Campaign[]
}

// Define the Influencer model
model Influencer {
  id               Int        @id @default(autoincrement())
  userId           Int        @unique
  influencerName   String
  niche            String
  followerDemographics String
  // Add other influencer-related fields here (e.g., engagement metrics)

  // Define relationships
  User User @relation(fields: [userId], references: [id])
  collaborations   Collaboration[]
}

// Define the Campaign model
model Campaign {
  id               Int       @id @default(autoincrement())
  companyId        Int
  title            String
  description      String
  budget           Float
  targetAudience   String
  contentRequirements String
  campaignDuration String
  status           String   // Enum: Pending, Active, Completed

  // Define relationships
  company   Company @relation(fields: [companyId], references: [id])
  collaborations Collaboration[]
}

// Define the Collaboration model
model Collaboration {
  id           Int       @id @default(autoincrement())
  campaignId   Int
  influencerId Int
  proposal     String
  contract     String   // Link to the digital contract
  status       String   // Enum: Pending, Active, Completed

  // Define relationships
  campaign   Campaign   @relation(fields: [campaignId], references: [id])
  influencer Influencer @relation(fields: [influencerId], references: [id])
}

// Define the Message model
model Message {
  id         Int     @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  timestamp  DateTime @default(now())

  // Define relationships
  sender   User @relation(fields: [senderId], references: [id])
  receiver User @relation(fields: [receiverId], references: [id])
}

// Define the Payment model
model Payment {
  id            Int     @id @default(autoincrement())
  collaborationId Int
  amount        Float
  paymentDate   DateTime
  paymentStatus String

  // Define relationships
  collaboration Collaboration @relation(fields: [collaborationId], references: [id])
}

// Define the Review model
model Review {
  id         Int     @id @default(autoincrement())
  reviewerId Int
  revieweeId Int
  rating     Int
  comment    String
  timestamp  DateTime @default(now())

  // Define relationships
  reviewer User @relation(fields: [reviewerId], references: [id])
  reviewee User @relation(fields: [revieweeId], references: [id])
}
